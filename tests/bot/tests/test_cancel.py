import pytest

from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from unittest.mock import AsyncMock

from tests.bot.utils import TEST_USER, TEST_CHAT
from tg_bot.src.main import handle_cancel, handle_wrong_cancel, Action


@pytest.mark.asyncio
async def test_cancel_handler(storage, bot):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —ç—Ç–æ–º.

    :param storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    :param bot: –ú–æ–∫ –±–æ—Ç–∞.
    :return: None.
    """
    message = AsyncMock()
    key = StorageKey(bot_id=bot.id, user_id=TEST_USER.id, chat_id=TEST_CHAT.id)
    state = FSMContext(storage=storage, key=key)

    await state.set_state(Action.help_with_training.state)
    assert await state.get_state() == Action.help_with_training.state

    await handle_cancel(message, state)

    assert await state.get_state() is None
    t = '–ó–∞–≤–µ—Ä—à–∏–ª–∏ /help_with_training, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–µ–ª–∞—Ç—å —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ.üòé'
    message.answer.assert_called_with(text=t)


@pytest.mark.asyncio
async def test_wrong_cancel_handler():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.

    :return: None.
    """
    message = AsyncMock()
    await handle_wrong_cancel(message)

    text = '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.'
    message.answer.assert_called_with(text=text)
