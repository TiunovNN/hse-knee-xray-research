import pytest

from unittest.mock import AsyncMock

from tg_bot.src.main import handle_error


@pytest.mark.asyncio
async def test_error_handler(write_commands):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ –æ—Ç –Ω–µ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

    :param write_commands: –°—Ç—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    :return: None.
    """
    message = AsyncMock()
    await handle_error(message)

    first = "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á–µ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –í—ã –Ω–∞–ø—É—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É?ü´°"
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫:\n' \
           f'{write_commands}'

    assert message.reply.call_count == 1
    assert message.answer.call_count == 1

    assert message.reply.call_args_list[0][1]['text'] == first
    assert message.answer.call_args_list[0][1]['text'] == text
