import asyncio
import io
import logging
import os
import sys
from dataclasses import dataclass
from http import HTTPStatus
from pprint import pformat

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiohttp import FormData
from aiohttp.client import ClientSession

CLASSES = ['Normal', 'Doubtful', 'Mild', 'Moderate', 'Severe']
SHOW_CLASSES = ', '.join(map(repr, CLASSES))


# states
class Action(StatesGroup):
    help_with_training = State()


# Commands
COMMANDS = [
    BotCommand(
        command='start',
        description='–ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.'
    ),
    BotCommand(
        command='help',
        description='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'
    ),
    BotCommand(
        command='description',
        description='–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞.'
    ),
    BotCommand(
        command='help_with_training',
        description=f'–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –º–æ–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è ({SHOW_CLASSES}).'
    ),
    BotCommand(
        command='cancel',
        description='–û—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è (–±—É–¥–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ).'
    )
]


# show commands for people
def write_commands():
    text = []
    for command in COMMANDS:
        text.append(f'/{command.command} - {command.description}')
    return '\n'.join(text)


@dataclass
class Config:
    token: str
    api_url: str

    @classmethod
    def from_env(cls) -> 'Config':
        token = os.getenv('BOT_TOKEN')
        if not token:
            raise ValueError('Please, set BOT_TOKEN')

        api_url = os.getenv('BOT_API_URL')
        if not api_url:
            raise ValueError('Please, set BOT_API_URL')

        return Config(token, api_url)


def configure_logging():
    # Configure logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s',
        stream=sys.stdout,
        force=True,
    )


dp = Dispatcher()


@dp.message(CommandStart())
async def handle_start(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –¥–∞—ë—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @return: None.
    """
    text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –Ø –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–µ–ø–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç–∞ –∫–æ–ª–µ–Ω–Ω–æ–≥–æ ' \
           '—Å—É—Å—Ç–∞–≤–∞ –ø–æ –µ–≥–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–º—É —Å–Ω–∏–º–∫—É.'
    await message.answer(text=text)


@dp.message(Command('help'))
async def handle_help(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∏—Ö –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @return: None.
    """
    await message.answer(text='–°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥:')
    await message.answer(text=write_commands())


@dp.message(Command('description'))
async def handle_description(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /description, –¥–∞–µ—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –±–æ—Ç–µ.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @return: None.
    """
    text = '–Ø –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤–∞—à–µ–≥–æ –∫–æ–ª–µ–Ω–Ω–æ–≥–æ —Å—É—Å—Ç–∞–≤–∞. –ú–Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω –≤–∞—à–µ–≥–æ ' \
           '–∫–æ–ª–µ–Ω–∞, –∏ –≤ –æ—Ç–≤–µ—Ç —è —Å–∫–∞–∂—É –≤–∞–º, –≤—Å–µ –ª–∏ —É –≤–∞—Å –≤ –ø–æ—Ä—è–¥–∫–µ –∏–ª–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—Å—ë –ø–ª–æ—Ö–æ. –Ø –º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 5 ' \
           f'–∫–ª–∞—Å—Å–æ–≤: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –ª–µ–≥–∫–∏–π, —Å—Ä–µ–¥–Ω–µ—Ç—è–∂–µ–ª—ã–π, —Ç—è–∂–µ–ª—ã–π ({SHOW_CLASSES}). –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ' \
           '–∫ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 1500 —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–∞—Ö —Å—É—Å—Ç–∞–≤–æ–≤ –∫–æ–ª–µ–Ω —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–µ–ø–µ–Ω—å—é ' \
           '–æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç–∞, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–¥–æ—Ä–æ–≤—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–ª–∞—Å—Å—ã –æ–ø—ã—Ç–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –≤ ' \
           '—ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.'
    await message.answer(text=text)


@dp.message(Command('help_with_training'))
async def handle_help(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help_with_training, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –µ–≥–æ
    –∫–ª–∞—Å—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–µ –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞.
    @return: None.
    """
    text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞ –∫–æ–ª–µ–Ω–∞ –∏ –∫ –∫–∞–∫–æ–º—É —Ç–∏–ø—É ' \
           f'–æ—Ç–Ω–æ—Å–∏—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {SHOW_CLASSES}). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —Ç–æ ' \
           '–ø—Ä–∏—à–ª–∏—Ç–µ /cancel.'
    await message.answer(text=text)
    await state.set_state(Action.help_with_training.state)


@dp.message(StateFilter(Action.help_with_training), Command('cancel'))
async def handle_cancel(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel, —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ —Ç–æ–º, –∫–∞–∫–æ–µ –±—ã–ª–æ —É–±—Ä–∞–Ω–æ.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–±–∏—Ä–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞.
    @return: None.
    """
    st = str(await state.get_state()).split(":")[1]
    await state.clear()
    await message.answer(text=f'–ó–∞–≤–µ—Ä—à–∏–ª–∏ /{st}, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–µ–ª–∞—Ç—å —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ.üòé')


@dp.message(StateFilter(None), Command('cancel'))
async def handle_wrong_cancel(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @return: None.
    """
    await message.answer(text='–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.')


@dp.message(StateFilter(None), F.photo)
async def handle_single_sending_prediction(message: types.Message, bot: Bot,
                                           httpclient: ClientSession):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è predict, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–æ–¥–µ–ª—å—é –∏ –¥–∞—ë—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –Ω–æ
    –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @param bot: –ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å.
    @param httpclient: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    @return: None.
    """
    buffer: io.BytesIO = await bot.download(message.photo[-1])
    form_data = FormData()
    form_data.add_field('files', buffer)

    async with httpclient.post('/predict', data=form_data) as response:
        if response.status == HTTPStatus.OK:
            answer = await response.json()
            severity = answer[0]['severity']
            await message.answer_photo(photo=message.photo[-1].file_id,
                                       parse_mode=ParseMode.MARKDOWN_V2,
                                       caption=f'–ö–æ–ª–µ–Ω–æ –Ω–∞ –í–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–Ω–æ—à—É –∫ *{CLASSES[severity]}* —Å—Ç–µ–ø–µ–Ω—å –æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç–∞')
        if 400 <= response.status < 500:
            answer = await response.json()
            await message.answer(f'–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç API:\n {pformat(answer)}')

        if response.status >= 500:
            await message.answer(f'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ')


@dp.message(StateFilter(Action.help_with_training), F.photo, F.caption.in_(CLASSES))
async def handle_save_training_image(message: types.Message, bot: Bot, httpclient: ClientSession):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è help_with_training, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫ –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å—É –Ω–∞–¥–æ
    –æ—Ç–Ω–µ—Å—Ç–∏ —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @param bot: –ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    @return: None.
    """
    buffer: io.BytesIO = await bot.download(message.photo[-1])
    form_data = FormData()
    form_data.add_field('file', buffer)

    severity = CLASSES.index(message.caption)
    async with httpclient.post(f'/train/{severity}', data=form_data) as response:
        if response.status == HTTPStatus.OK:
            await message.answer_photo(photo=message.photo[-1].file_id,
                                       parse_mode=ParseMode.MARKDOWN_V2,
                                       caption=f'–°–ø–∞—Å–∏–±–æ, –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–ª–∞—Å—Å–∞ *{message.caption}*')

        if 400 <= response.status < 500:
            answer = await response.json()
            await message.answer(f'–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç API:\n {pformat(answer)}')

        if response.status >= 500:
            await message.answer(f'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ')


@dp.message(StateFilter(Action.help_with_training))
async def handle_wrong_save_training_image(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—ã–ª –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    (–∑–Ω–∞–µ–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ–º –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ).

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @return: None.
    """
    await message.reply(
        text='–í—ã –∑–∞–±—ã–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫ –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ '
             '–Ω–∞–ø–∏—Å–∞–ª–∏ –∫–ª–∞—Å—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.')


@dp.message()
async def handle_error(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—á–∏–Ω–∏—Ç—å –¥—Ä—É–≥–∏–º –∑–∞–ø—Ä–æ—Å–∞–º, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–º –∏
    –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥.

    @param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    @return: None.
    """
    await message.reply(
        text="–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á–µ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –í—ã –Ω–∞–ø—É—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É?ü´°")  # it's ok, it's emoji
    await message.answer(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫:\n{write_commands()}')


async def start_bot(bot: Bot):
    await bot.set_my_commands(COMMANDS, BotCommandScopeDefault())


def create_help_dir():
    help_images_path = './../help_images'
    if not os.path.exists(help_images_path):
        os.makedirs(help_images_path)
    for help_image_class in CLASSES:
        if not os.path.exists(help_images_path + '/' + help_image_class):
            os.makedirs(help_images_path + '/' + help_image_class)


async def main():
    create_help_dir()
    configure_logging()
    config = Config.from_env()
    bot = Bot(config.token)
    session = ClientSession(base_url=config.api_url)
    dp.startup.register(start_bot)
    async with session as aiohttp_client:
        await dp.start_polling(bot, httpclient=aiohttp_client, close_bot_session=True)


if __name__ == '__main__':
    asyncio.run(main())
