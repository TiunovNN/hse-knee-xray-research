import asyncio
import io
import logging
import os
import sys
import time
import catboost

from dataclasses import dataclass
from pathlib import Path
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BotCommand, BotCommandScopeDefault

from prediction import Predictor


CLASSES = ['Normal', 'Doubtful', 'Mild', 'Moderate', 'Severe']
SHOW_CLASSES = '"' + '", "'.join(CLASSES[:-1]) + f'" or "{CLASSES[-1]}"'


# states
class Action(StatesGroup):
    predict = State()
    help_with_training = State()
    lots_of_predictions = State()


# Commands
COMMANDS = [
    BotCommand(
        command='start',
        description='–ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.'
    ),
    BotCommand(
        command='help',
        description='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'
    ),
    BotCommand(
        command='description',
        description='–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞.'
    ),
    BotCommand(
        command='predict',
        description='–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–µ–Ω–∞ –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å(–æ–º—É/–∏–º) —Å–Ω–∏–º–∫(—É/–∞–º).'
    ),
    BotCommand(
        command='lots_of_predictions',
        description='–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–º —Å–Ω–∏–º–∫–∞–º –∫–æ–ª–µ–Ω.'
    ),
    BotCommand(
        command='help_with_training',
        description=f'–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –º–æ–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è ({SHOW_CLASSES}).'
    ),
    BotCommand(
        command='cancel',
        description='–û—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è (–±—É–¥–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ).'
    )
]


# show commands for people
def write_commands():
    text = []
    for command in COMMANDS:
        text.append(f'/{command.command} - {command.description}')
    return '\n'.join(text)


@dataclass
class Config:
    token: str
    model_path: str

    @classmethod
    def from_env(cls) -> 'Config':
        token = os.getenv('BOT_TOKEN')
        if not token:
            raise ValueError('Please, set BOT_TOKEN')

        model_path = os.getenv('BOT_MODEL_PATH')
        if not model_path:
            raise ValueError('Please, set BOT_MODEL_PATH')

        if not Path(model_path).is_file():
            raise ValueError(f'File {model_path} does not exist')

        return Config(token, model_path)


def configure_logging():
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s',
        stream=sys.stdout,
        force=True,
    )


dp = Dispatcher()

# Commands
# /start
@dp.message(CommandStart())
async def handle_start(message: types.Message):
    text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –Ø –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–µ–ø–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç–∞ –∫–æ–ª–µ–Ω–Ω–æ–≥–æ ' \
           '—Å—É—Å—Ç–∞–≤–∞ –ø–æ –µ–≥–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–º—É —Å–Ω–∏–º–∫—É.'
    await message.answer(text=text)


# /help
@dp.message(Command('help'))
async def handle_help(message: types.Message):
    await message.answer(text='–°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥:')
    await message.answer(text=write_commands())


# /description
@dp.message(Command('description'))
async def handle_description(message: types.Message):
    text = '–Ø –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤–∞—à–µ–≥–æ –∫–æ–ª–µ–Ω–Ω–æ–≥–æ —Å—É—Å—Ç–∞–≤–∞. –ú–Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω –≤–∞—à–µ–≥–æ ' \
           '–∫–æ–ª–µ–Ω–∞, –∏ –≤ –æ—Ç–≤–µ—Ç —è —Å–∫–∞–∂—É –≤–∞–º, –≤—Å–µ –ª–∏ —É –≤–∞—Å –≤ –ø–æ—Ä—è–¥–∫–µ –∏–ª–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—Å—ë –ø–ª–æ—Ö–æ. –Ø –º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 5 ' \
           f'–∫–ª–∞—Å—Å–æ–≤: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –ª–µ–≥–∫–∏–π, —Å—Ä–µ–¥–Ω–µ—Ç—è–∂–µ–ª—ã–π, —Ç—è–∂–µ–ª—ã–π ({SHOW_CLASSES}). –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ' \
           '–∫ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 1500 —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–∞—Ö —Å—É—Å—Ç–∞–≤–æ–≤ –∫–æ–ª–µ–Ω —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–µ–ø–µ–Ω—å—é ' \
           '–æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç–∞, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–¥–æ—Ä–æ–≤—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–ª–∞—Å—Å—ã –æ–ø—ã—Ç–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –≤ ' \
           '—ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.'
    await message.answer(text=text)


# /predict
@dp.message(Command('predict'))
async def handle_predict(message: types.Message, state: FSMContext):
    text = '–ü–æ–∂–∞–ª–π—É—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞ –≤–∞—à–µ–≥–æ –∫–æ–ª–µ–Ω–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.'
    await message.answer(text=text)
    await state.set_state(Action.predict.state)


# lots_of_predictions
@dp.message(Command('lots_of_predictions'))
async def handle_lots_of_predictions(message: types.Message, state: FSMContext):
    text = '–ü–æ–∂–∞–ª–π—É—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –∫–æ–ª–µ–Ω, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ ' \
           '–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
    await message.answer(text=text)
    await state.set_state(Action.lots_of_predictions.state)


# help_with_training
@dp.message(Command('help_with_training'))
async def handle_help(message: types.Message, state: FSMContext):
    text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞ –∫–æ–ª–µ–Ω–∞ –∏ –∫ –∫–∞–∫–æ–º—É —Ç–∏–ø—É ' \
           f'–æ—Ç–Ω–æ—Å–∏—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {SHOW_CLASSES}). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —Ç–æ ' \
           '–ø—Ä–∏—à–ª–∏—Ç–µ /cancel.'
    await message.answer(text=text)
    await state.set_state(Action.help_with_training.state)


# cancel
@dp.message(StateFilter(Action.predict), Command('cancel'))
@dp.message(StateFilter(Action.help_with_training), Command('cancel'))
@dp.message(StateFilter(Action.lots_of_predictions), Command('cancel'))
async def handle_cancel(message: types.Message, state: FSMContext):
    st = str(await state.get_state()).split(":")[1]
    await state.clear()
    await message.answer(text=f'–ó–∞–≤–µ—Ä—à–∏–ª–∏ /{st}, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–µ–ª–∞—Ç—å —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ.üòé')


# wrong cancel
@dp.message(StateFilter(None), Command('cancel'))
async def handle_wrong_cancel(message: types.Message):
    await message.answer(text='–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.')


# Helping methods
# unstoppable prediction
@dp.message(StateFilter(Action.lots_of_predictions), F.photo)
async def handle_unstoppable_prediction(message: types.Message, bot: Bot, predictor: Predictor):
    logging.info(f'{message.photo=!r}')
    buffer: io.BytesIO = await bot.download(message.photo[-1])
    start_time = time.perf_counter()
    severity = predictor.predict(buffer)
    logging.info(f'Predicted: {time.perf_counter() - start_time}')
    await message.answer_photo(photo=message.photo[-1].file_id, parse_mode=ParseMode.MARKDOWN_V2,
                               caption=f'–ö–æ–ª–µ–Ω–æ –Ω–∞ –í–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–Ω–æ—à—É –∫ *{CLASSES[severity]}* —Å—Ç–µ–ø–µ–Ω—å –æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç–∞')


# single sending prediction
@dp.message(StateFilter(Action.predict), F.photo)
async def handle_single_sending_prediction(message: types.Message, state: FSMContext, bot: Bot, predictor: Predictor):
    await handle_unstoppable_prediction(message, bot, predictor)
    await state.clear()


# save training image
@dp.message(StateFilter(Action.help_with_training), F.photo, F.caption.in_(CLASSES))
async def handle_save_training_image(message: types.Message, bot: Bot):
    photo_path = f'./../help_images/{message.caption}/{message.photo[-1].file_id}.jpg'
    await bot.download(message.photo[-1], destination=photo_path)
    await message.answer_photo(photo=message.photo[-1].file_id, parse_mode=ParseMode.MARKDOWN_V2,
                               caption=f'–°–ø–∞—Å–∏–±–æ, –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–ª–∞—Å—Å–∞ *{message.caption}*')


# wrong save training image
@dp.message(StateFilter(Action.predict))
@dp.message(StateFilter(Action.lots_of_predictions))
@dp.message(StateFilter(Action.help_with_training))
async def handle_wrong_save_training_image(message: types.Message):
    await message.reply(text='–í—ã –∑–∞–±—ã–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫ –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ '
                             '–Ω–∞–ø–∏—Å–∞–ª–∏ –∫–ª–∞—Å—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.')


# wrong photo state
@dp.message(F.photo)
async def handle_wrong_photo_state(message: types.Message):
    await message.answer(text='–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, —Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /predict.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è '
                              '–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, —Ç–æ–≥–¥–∞ /lots_of_predictions.\n'
                              '–î–ª—è –ø–æ–º–æ—â–∏ –≤ –º–æ—ë–º –æ–±—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help_with_training.')


# /other_messages
@dp.message()
async def handle_error(message: types.Message):
    await message.reply(text="–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–∞–ø—É—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É?ü´°")  # it's ok, it's emoji
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö:\n{write_commands()}')


async def start_bot(bot: Bot):
    await bot.set_my_commands(COMMANDS, BotCommandScopeDefault())


def create_help_dir():
    help_images_path = './../help_images'
    if not os.path.exists(help_images_path):
        os.makedirs(help_images_path)
    for help_image_class in CLASSES:
        if not os.path.exists(help_images_path + '/' + help_image_class):
            os.makedirs(help_images_path + '/' + help_image_class)


async def main():
    create_help_dir()
    configure_logging()
    config = Config.from_env()
    bot = Bot(config.token)
    predictor = Predictor(catboost.CatBoostClassifier().load_model(config.model_path))
    dp.startup.register(start_bot)
    try:
        await dp.start_polling(bot, predictor=predictor)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
